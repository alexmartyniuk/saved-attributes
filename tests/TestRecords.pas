unit TestRecords;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, DB, Windows, uStorageSQLiteImpl, Generics.Collections, Classes,
  Variants, uStorageIntf, SQLiteTable3, SysUtils, Forms;

type

  TTestRecords = class(TTestCase)
  strict private
    FStorage: IStorage;
    FStorageFileName: string;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestRecordSavedSuccessfully;
  end;

implementation

procedure TTestRecords.SetUp;
begin
  FStorageFileName := ChangeFileExt(Application.ExeName, '.db');

  if FileExists(FStorageFileName) then
    DeleteFile(FStorageFileName);

  FStorage := Storage(FStorageFileName);
  FStorage.Open();
end;

procedure TTestRecords.TearDown;
begin
  if Assigned(FStorage) then
  begin
    FStorage.Close();
    FStorage := nil;
  end;

  if FileExists(FStorageFileName) then
    DeleteFile(FStorageFileName);
end;

procedure TTestRecords.TestRecordSavedSuccessfully;
const
  ROWS_COUNT = 7;
var
  table: ITable;
  row: IRecord;
  i: Integer;
  res: IList<IRecord>;
begin
  table := FStorage.Table('table1');

  for i := 1 to ROWS_COUNT do
  begin
    row := table.NewRecord();
    row.Attribute['ID'] := row.Guid;
  end;
  res := table.ReadMany();

  CheckNotNull(res);
  CheckEquals(ROWS_COUNT, res.Count);
end;

initialization

RegisterTest(TTestRecords.Suite);

end.
